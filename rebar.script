%%% vim: ft=erlang
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% internal functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

OsGetEnv
= fun(Env, Default) ->
      case os:getenv(Env) of
        Val
          when
            %% not found
            Val =:= false
            %% or is empty
            orelse Val =:= []
            -> Default;
        Val -> Val
      end
  end,

ConfigGet
= fun(Cfg, Key, Default) ->
      case lists:keyfind(Key, 1, Cfg) of
        {Key, Val}  -> Val;
        false       -> Default
      end
  end,

ConfigSet
= fun(Cfg, Key, Val) ->
      case ConfigGet(Cfg, Key, false) of
        false -> [{Key, Val} | Cfg];
        OldVal -> lists:keyreplace(Key, 1, Cfg, {Key, Val})
      end
  end,

ConfigSetList
= fun(Cfg, List) ->
      Set = fun(F, Cfg, []) ->
                Cfg;
               (F, Cfg, [{Key, Val} | Tail]) ->
                CfgNew = ConfigSet(Cfg, Key, Val),
                F(F, CfgNew, Tail)
            end,
      Set(Set, Cfg, List)
  end,

UpperChar
= fun(C) when
        C >= $a,
        C =< $z
        ->
      C - 32;
     (C) ->
      C
  end,

UpperStr
= fun(Str) ->
      [UpperChar(X) || X <- Str]
  end,

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% internal vars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[_, AppNameBin | _] = lists:reverse(re:split(SCRIPT, "/")),
AppName = erlang:binary_to_list(AppNameBin),
ConfigDepsDefaultPrefix = ConfigGet(CONFIG, deps_default_prefix, ""),
DepsDefaultPrefix = OsGetEnv("REBAR_DEPS_DEFAULT_PREFIX", ConfigDepsDefaultPrefix),

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% updating functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

UpdateConfigFromFile
= fun
    (CurrentConfig, []) -> CurrentConfig;
    (CurrentConfig, File) ->
      case file:consult(File) of
        {ok, Terms}  -> ConfigSetList(CurrentConfig, Terms);
        Error        ->
          io:format("error while reading file ~p: ~p~n", [File, Error]),
          throw(Error)
      end
  end,

UpdateConfigFromEnv
= fun(CurrentConfig, Env) ->
      File = OsGetEnv(Env, []),
      UpdateConfigFromFile(CurrentConfig, File)
  end,

UpdateConfigFromRebarConfigDirEnv
= fun(CurrentConfig) ->
      File = OsGetEnv("REBAR_CONFIG_DIR", [])
            ++ "/"
            ++ AppName
            ++ ".rebar.config",
      case filelib:is_regular(File) of
        false ->
          CurrentConfig;
        true ->
          UpdateConfigFromFile(CurrentConfig, File)
      end
  end.

UpdateConfigFromRebarEnv
= fun(CurrentConfig) ->
      Cfg = UpdateConfigFromEnv(CurrentConfig, "REBAR_CONFIG"),
      os:unsetenv("REBAR_CONFIG"),
      Cfg
  end,

UpdateConfigFromAppEnv
= fun(CurrentConfig) ->
      UpdateConfigFromEnv(CurrentConfig, UpperStr(AppName) ++ "_REBAR_CONFIG")
  end,

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% VCS functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

RebarVCS
= fun(SubApp, VCS) ->
      VCSPrefix = fun(EnvName) ->
                      EnvNameStr = erlang:atom_to_list(EnvName),
                      EnvGitOS = OsGetEnv(UpperStr(EnvNameStr) ++ "_GIT_PREFIX",
                                          DepsDefaultPrefix)
                  end,
      AppVCS = fun(Prefix, AppName) ->
                   Prefix ++ erlang:atom_to_list(AppName)
               end,
      case VCS of
        {git, env, Ref} ->
          {git, AppVCS(VCSPrefix(SubApp), SubApp), Ref};
        {git, {env, EnvName}, Ref} ->
          {git, AppVCS(VCSPrefix(EnvName), SubApp), Ref};
        _ -> VCS
      end
  end,

UpdateVCS
= fun
    ({SubApp, Version, VCS}) ->
      {SubApp, Version, RebarVCS(SubApp, VCS)};
    ({SubApp, Version, VCS, Opts}) ->
      {SubApp, Version, RebarVCS(SubApp, VCS), Opts};
    (X) -> X
  end,

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% updating config
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Cfg0 = UpdateConfigFromRebarConfigDirEnv(CONFIG),
Cfg1 = UpdateConfigFromRebarEnv(Cfg0),
Cfg2 = UpdateConfigFromAppEnv(Cfg1),

Deps = lists:map(
         fun(X) ->
             UpdateVCS(X)
         end, ConfigGet(Cfg2, deps, [])),

Cfg3 = ConfigSetList(Cfg2, [{deps, Deps}]),

Cfg = Cfg3,

Cfg.
